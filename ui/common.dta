{new HelpBarPanel helpbar
   (file helpbar.milo)
   (max_labels 4)
   (max_buttons 4)
   (button_spacing 35)
   (strumbar_spacing 70)
   (text_spacing 30)}
{new MetaPanel meta
   (file "")
   (won_campaign FALSE)
   (load {set_loader_period 13})
   (enter {set_loader_period 5})
   (set_defaults
      {set $first_screen main_screen}
      {set $autosave FALSE}
      {set $main_entered FALSE}
      {gamecfg set mode quickplay})}
{func is_updown_button ($button)
   {'||'
      {== $button kPad_DDown}
      {== $button kPad_DUp}}}
#define VENUE_MAP_SCROLL_SEC (0.3)
{new CharsysPanel char_single
   (num_placers 1)
   (load_order LOAD_CHARACTERS)
   (enter
      {$this show_char 0 {game get_character_outfit}})}
#define SEL_DIFFICULTY_COMMON
((update_focus
      {$this set_focus
         {switch {$this last_difficulty}
            (kDifficultyEasy sd_diff1.btn)
            (kDifficultyMedium sd_diff2.btn)
            (kDifficultyHard sd_diff3.btn)
            (kDifficultyExpert sd_diff4.btn)}})
   (set_difficulty ($component $player_num)
      {{game get_player_config $player_num}
         set_difficulty
         {switch $component
            (sd_diff1.btn kDifficultyEasy)
            (sd_diff2.btn kDifficultyMedium)
            (sd_diff3.btn kDifficultyHard)
            (sd_diff4.btn kDifficultyExpert)}}
      {$this update_difficulty})
   (SELECT_START_MSG
      {$this set_difficulty $component 0}
      {if {> {game get_num_players} 1}
         {$this set_difficulty $component 1}}
      kDataUnhandled))
{new UIPanel sel_difficulty_panel
   (file sel_difficulty.milo)
   SEL_DIFFICULTY_COMMON
   (enter
      {$this update_focus})
   (last_difficulty
      {game get_difficulty 0})
   (update_difficulty)}
{new GHPanel sel_character_panel
   (file sel_character.milo)
   (char_focus rockabill)
   (char_outfit rockabill1)
   (old_scroll_pos 0)
   (focus character.lst)
   (skin_select FALSE)
   (enter
      {character.lst set_provider character_provider}
      {animate_forever_30fps $this sel_character.view}
      {sel_skin.tnm set_frame 0}
      {char_highlight.mnm animate
         (loop 0 3)
         (period 0.25)
         (units kTaskUISeconds)}
      {set [skin_select] FALSE}
      {$this set_focus character.lst}
      {text_character.grp set_showing TRUE}
      {text_skin.grp set_showing FALSE}
      {do
         ($character {game get_character})
         ($outfit {game get_character_outfit})
         {char_single show_char 0 $outfit}
         {char_single char_event 0 animate}
         {sc_char_nm.lbl set_text $character}
         {sc_char_blurb.lbl set_localized_text {localize {sprint $character "_blurb"}}}
         {$this set char_focus $character}
         {$this set char_outfit $outfit}
         {character.lst set_selected {character_provider get_index $character}}
         {$this set old_scroll_pos {character.lst selected_pos}}
         {char_highlight.tnm set_frame [old_scroll_pos]}
         {foreach
            $c
            CHARACTERS
            {do
               ($mesh {sprint "char_" $c ".mesh"})
               {if_else {campaign is_unlocked $c}
                  {$mesh set_mat {sprint "char_" $c ".mat"}}
                  {$mesh set_mat char_locked.mat}}}}})
   (poll
      {scl_loading.lbl set_showing {! {char_single are_chars_loaded}}})
   (exit
      {set [skin_select] FALSE})
   (choose_skins
      {set [skin_select] TRUE}
      {text_character.grp set_showing FALSE}
      {text_skin.grp set_showing TRUE}
      {sel_skin.tnm animate
         (units kTaskUISeconds)
         (period SKIN_ANIM_TIME)
         (range 0 10)}
      {if_else {== {character_provider get_outfit [char_focus] 1} [char_outfit]}
         {$this set_focus outfit2.btn}
         {$this set_focus outfit1.btn}}
      {outfit1.btn set_text {sprint {character_provider get_outfit [char_focus] 0} _outfit}}
      {outfit2.btn set_text {sprint {character_provider get_outfit [char_focus] 1} _outfit}})
   (unchoose_skins
      {set [skin_select] FALSE}
      {text_skin.grp set_showing FALSE}
      {text_character.grp set_showing TRUE}
      {sel_skin.tnm animate
         (units kTaskUISeconds)
         (period SKIN_ANIM_TIME)
         (range 10 0)}
      {$this set_focus character.lst}
      {synth play_sequence button_back.cue})
   (open_door)
   (SCROLL_MSG
      {do
         ($new_scroll_pos
            {character.lst selected_pos})
         {if {&& {!= $new_scroll_pos [old_scroll_pos]} {character_provider is_active $new_scroll_pos}}
            {synth play_sequence button_toggle}
            {set [char_focus] {character_provider get_symbol $new_scroll_pos}}
            {if_else {== [char_focus] {game get_character}}
               {set [char_outfit] {game get_character_outfit}}
               {set [char_outfit] {character_provider get_outfit [char_focus] 0}}}
            {if [char_focus]
               {sc_char_nm.lbl set_text [char_focus]}
               {sc_char_blurb.lbl set_localized_text {localize {sprint [char_focus] "_blurb"}}}
               {char_single show_char 0 [char_outfit]}
               {char_single char_event 0 animate}
               {$this set old_scroll_pos $new_scroll_pos}
               {char_highlight.tnm set_frame $new_scroll_pos}}}})
   (FOCUS_MSG
      {if [skin_select]
         {do ($idx) ($old_char)
            {synth play_sequence button_toggle}
            {if_else {== $new_focus "outfit1.btn"}
               {set $idx 0}
               {set $idx 1}}
            {set [char_outfit] {character_provider get_outfit [char_focus] $idx}}
            {cs_arrow.tnm set_frame $idx}
            {set $old_char {char_single get_char 0}}
            {if {char_single show_char 0 [char_outfit]}
               {do
                  ($new_char {char_single get_char 0})
                  {if_else {&& $old_char $new_char}
                     {do
                        {reset_hair $new_char}
                        {{$new_char find main.drv} transfer
                           {$old_char find main.drv}}}
                     {char_single char_event 0 select}}}}
            {sc_char_outfit_blurb.lbl set_localized_text {localize {sprint [char_focus] "_outfit_blurb"}}}}}
      kDataUnhandled)}
#define SEL_CHARACTER_COMMON
((panels meta sel_character_panel char_single helpbar)
   (focus sel_character_panel)
   (allow_back FALSE)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (TRANSITION_COMPLETE_MSG
      {char_single set_placer 0 {sel_character_panel find char_single.placer}}
      {char_single set_env 0 {sel_character_panel find character.env}})
   (exit
      {char_single set_placer 0}
      {char_single set_door 0})
   (enter
      {char_single set_door 0 {sel_character_panel find cs_door.mesh}})
   (BUTTON_DOWN_MSG
      {if {== $button kPad_Tri}
         {if_else {sel_character_panel get skin_select}
            {sel_character_panel unchoose_skins}
            {do
               {$this backwards_anim}
               {synth play_sequence button_back.cue}
               {ui goto_screen [back_screen]}}}}
      kDataUnhandled))
#define SEL_CHARACTER_SELECT_HANDLER
({if_else {sel_character_panel get skin_select}
      {do
         ($sel_outfit {sel_character_panel get char_outfit})
         {if {&& $sel_outfit {!= {game get_character_outfit} $sel_outfit}}
            {game set_character $sel_outfit}}
         {ui goto_screen [done_screen]}}
      {do
         ($sel_char {sel_character_panel get char_focus})
         {if_else {> {character_provider num_outfits $sel_char} 1}
            {sel_character_panel choose_skins}
            {do
               {game set_character {sel_character_panel get char_outfit} TRUE}
               {ui goto_screen [done_screen]}}}}})
{new GuitarDisplayPanel guitar_display_panel
   (file "")
   (force_exit TRUE)}
{new GuitarSelectPanel sel_guitar_panel
   (file sel_guitar.milo)
   (quickplay FALSE)
   (enter
      {sel_guitar.tnm set_frame 0})
   (update_display
      ($play_sfx)
      {do
         ($guitar {$this get_selected_guitar 0})
         ($skin {$this get_selected_skin 0})
         {sg_guitar_nm.lbl set_text $guitar}
         {sg_guitar_desc.lbl set_text {game get_guitar_desc $guitar}}
         {sg_skin_nm.lbl set_text $skin}
         {sg_skin_desc.lbl set_text {game get_guitar_skin_desc $skin}}
         {sg_text_guitar.grp set_showing {! {$this is_skin_select 0}}}
         {sg_text_skin.grp set_showing {$this is_skin_select 0}}
         {guitar_display_panel set_env 0 guitar.env}
         {guitar_display_panel show_guitar 0 $guitar $skin guitar.pxy guitar_single.filt}
         {if $play_sfx {synth play_sequence button_toggle}}})
   (choose_skins
      {sel_guitar.tnm animate
         (units kTaskUISeconds)
         (period 0.4)
         (range 0 100)})
   (unchoose_skins
      {sel_guitar.tnm animate
         (units kTaskUISeconds)
         (period 0.4)
         (range 100 0)}
      {$this set_skin_select 0 FALSE}
      {sg_text_guitar.grp set_showing {! {$this is_skin_select 0}}}
      {sg_text_skin.grp set_showing {$this is_skin_select 0}})}
#define SEL_GUITAR_COMMON
((panels meta sel_guitar_panel helpbar guitar_display_panel char_single)
   (focus sel_guitar_panel)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (enter
      {sel_guitar_panel set_skin_select 0 FALSE}
      {sel_guitar_panel update_display FALSE}
      {char_single set_paused TRUE})
   (exit
      {char_single set_paused FALSE})
   (goto_career
      {game set_guitar {sel_guitar_panel get_selected_guitar 0} {sel_guitar_panel get_selected_skin 0}}
      {do
         ($new_campaign {campaign new_campaign})
         {campaign set_character_info}
         {if_else $new_campaign
            {ui goto_screen tour_start_screen}
            {ui goto_screen career_screen}}})
   (BUTTON_DOWN_MSG
      {switch $button
         (kPad_Tri
            {if_else {sel_guitar_panel is_skin_select 0}
               {$this unchoose_skins}
               {$this go_back}})
         kDataUnhandled})
   (guitar_selected
      ($player_num)
      {synth play_sequence button_select}
      {if_else {sel_guitar_panel is_skin_select 0}
         {do
            {$this goto_career}}
         {do
            ($guitar {sel_guitar_panel get_selected_guitar 0})
            {if_else {> {sel_guitar_panel get_num_skins $player_num $guitar} 1}
               {do
                  {sel_guitar_panel set_skin_select 0 TRUE}
                  {$this choose_skins}
                  {sel_guitar_panel update_display FALSE}}
               {do
                  {$this goto_career}}}}}
      TRUE))
#define SEL_VENUE_SCREEN_HANDLERS
((panels meta sel_venue_panel helpbar)
   (focus sel_venue_panel)
   (helpbar
      (default
         ((fret1 help_continue)
            (fret2 help_back)
            (strum help_updown))))
   (venue_button_name ($venue)
      {sprintf "sv_%s.btn" $venue})
   (venue_button ($venue)
      {sel_venue_panel find {sprintf "sv_%s.btn" $venue}})
   (enter
      {campaign foreach_venue $venue
         {do
            ($button {$this venue_button_name $venue})
            ($unlocked {campaign is_unlocked $venue})
            {if_else $unlocked
               {$this enable {sel_venue_panel find $button}}
               {$this disable {sel_venue_panel find $button}}}}}
      {game set_career_venue}
      {do
         ($index {game get_venue_index})
         ($venue {game get_venue})
         {{sel_venue_panel find venue_anims.grp} set_frame {'+' $index 1}}
         {$this set_focus {$this venue_button $venue}}})
   (set_venue_map_frame ($frame)
      {{sel_venue_panel find venue_anims.grp} animate
         (dest $frame)
         (period VENUE_MAP_SCROLL_SEC)
         (units kTaskUISeconds)})
   (FOCUS_MSG
      {if {! {ui in_transition}}
         {switch $new_focus
            (sv_battle.btn
               {$this set_venue_map_frame 1}
               {game set_venue battle})
            (sv_small1.btn
               {$this set_venue_map_frame 2}
               {game set_venue small1})
            (sv_small2.btn
               {$this set_venue_map_frame 3}
               {game set_venue small2})
            (sv_big.btn
               {$this set_venue_map_frame 4}
               {game set_venue big})
            (sv_theatre.btn
               {$this set_venue_map_frame 5}
               {game set_venue theatre})
            (sv_fest.btn
               {$this set_venue_map_frame 6}
               {game set_venue fest})
            (sv_arena.btn
               {$this set_venue_map_frame 7}
               {game set_venue arena})
            (sv_stone.btn
               {$this set_venue_map_frame 8}
               {game set_venue stone})}})
   (SELECT_START_MSG
      {ui goto_screen [next_screen]}
      kDataUnhandled))
{new GHPanel sel_venue_panel
   (file sel_venue.milo)
   (focus sv_battle.btn)}
{new GHPanel sel_song_panel
   (file sel_song_quickplay.milo)
   (metamusic_on_exit TRUE)
   (focus ss_song.lst)
   (joypad
      (hold_ms 500)
      (repeat_ms 80))
   (enter
      {{ui current_screen} turn_off_ambient}
      {song_provider set_quickplay TRUE}
      {ss_song.lst set_provider song_provider}
      {if {== {game get_song_index} -1}
         {game set_song_index 0}}
      {if $random_picked
         {do
            {set $random_picked FALSE}
            {game set_song_index 0}}}
      {$this update_song_info})
   (update_song_info
      {ss_song.lst set_selected {game get_song_index}}
      {meta_music stop}
      {$this update_pos})
   (exit
      {song_preview ''}
      {if [metamusic_on_exit]
         {meta_music start}}
      {set [metamusic_on_exit] TRUE}
      {song_provider set_quickplay FALSE})
   (SCROLL_MSG
      {$this update_pos})
   (update_pos
      {do
         ($pos {ss_song.lst selected_pos})
         ($frame {'+' $pos {song_provider num_headers $pos}})
         {game set_song_index $pos}
         {song_preview {game get_song}}
         {sel_song.view set_frame $frame}})}
{new GHPanel sel_playlist_panel
   (file sel_song.milo)
   (metamusic_on_exit TRUE)
   (focus ss_song.lst)
   (joypad
      (hold_ms 500)
      (repeat_ms 80))
   (enter
      {{ui current_screen} turn_off_ambient}
      {song_provider set_quickplay TRUE}
      {ss_song.lst set_provider song_provider}
      {if {== {game get_song_index} -1}
         {game set_song_index 0}}
      {$this update_song_info})
   (update_song_info
      {ss_song.lst set_selected {game get_song_index}}
      {meta_music stop}
      {$this update_pos})
   (exit
      {song_preview ''}
      {if [metamusic_on_exit]
         {meta_music start}}
      {set [metamusic_on_exit] TRUE}
      {song_provider set_quickplay FALSE})
   (SCROLL_MSG
      {$this update_pos})
   (update_pos
      {do
         ($pos {ss_song.lst selected_pos})
         ($frame {'+' $pos {song_provider num_headers $pos}})
         {game set_song_index $pos}
         {song_preview {game get_song}}
         {sel_song.view set_frame $frame}})
   (playlist_select_song ($added_song)
      {push_back $playlist $added_song}
      {set $current_song_index {song_provider get_symbol {ss_song.lst selected_pos}}}
      {push_back $song_index_list $current_song_index}
      {set $playlist_index {+ $playlist_index 1}}
      {do
         ($index {ss_song.lst selected_pos})
         ($song {song_provider get_symbol $index})
         {campaign cheat_beat_song $song {+ $playlist_index 1}}
         {$this refresh}})
   (playlist_unselect_song
      {if_else {== {size $playlist} 0}
         {$this go_back}
         {do
            {campaign cheat_beat_song $current_song_index ' '}
            {$this refresh}
            {{resize $playlist {- {size $playlist} 1}}}
            {{resize $song_index_list {- {size $song_index_list} 1}}}
            {set $playlist_index {- $playlist_index 1}}
            {set $current_song_index {elem {size $song_index_list}}}}})
   (start_playlist
      {if_else {== {size $playlist} 0}
         {play_sfx button_error (volume 1) (stop TRUE)}
         {do
            {game set_song {elem $playlist 0}}
			{set $playlist_index 0}
            {post_song_select}}})
   (refresh
      {song_provider set_quickplay TRUE}
      {ss_song.lst set_provider song_provider}
      {if {== {game get_song_index} -1}
         {game set_song_index 0}}
      {$this update_song_info})}
{func post_song_select
   {if_else {|| {== {{ui current_screen} name} post_show_screen} {== {{ui current_screen} name} complete_screen}}
      {ui goto_screen loading_screen}
      {if_else {== {gamecfg get mode} jukebox}
         {do
            {{game get_player_config 0} set_difficulty kDifficultyExpert}
            {game set_quickplay}
            {game_screen set attract_mode TRUE}
            {ui goto_screen loading_screen}}
         {do
            {game_screen set attract_mode FALSE}
            {ui goto_screen qp_selpart_screen}}}}}
{func random_song
   {game set_song {campaign pick_attract_song}}
   {if {||
   {== {game get_song} randomsong}
   {== {game get_song} shufflemode}
   {== {game get_song} playlist}}
      {random_song}}}
{func clear_playlist
   {set $playlist ()}
   {set $song_index_list ()}
   {set $current_song_index 0}
   {set $playlist_index 0}}