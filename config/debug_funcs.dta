; File originally named cheats_funcs.dta and renamed for clarity
;
; These are the functions that go to the binds in debug_binds.dta. Messy
; internal engine stuff, by and large. Do not want.
{new Object cheat_display
   (show
      ($msg)
      {rnd show_overlay cheats TRUE}
      {rnd reflect cheats {print $msg "\n"}}
      {set [refs] {'+' [refs] 1}}
      {script_task
         (delay CHEAT_DISPLAY_S)
         (units kTaskUISeconds)
         (script
            {set [refs] {- [refs] 1}}
            {if {== [refs] 0}
               {rnd show_overlay cheats FALSE}})})
   (show_bool
      ($label $val)
      {$this show {sprint $label ": " {if_else $val "ON" "OFF"}}}
      {set [refs] {'+' [refs] 1}}
      {script_task
         (delay CHEAT_DISPLAY_S)
         (units kTaskUISeconds)
         (script
            {set [refs] {- [refs] 1}}
            {if {== [refs] 0}
               {rnd show_overlay cheats FALSE}})})
   (refs 0)}
{func audio_array
   {find $syscfg beatmatch audio}}
{func get_audio
   {elem {elem {audio_array} 1} 0}}
{func set_audio
   ($val)
   {set {elem_var {elem {audio_array} 1} 0} $val}
   {cheat_display show {sprint "New audio mode: " $val}}}
{func toggle_world
   {if {find_obj world}
      {do
         ($quickfocus {! {world_panel showing}})
         {world_panel set_showing $quickfocus}
         {cheat_display show_bool "World rendering" $quickfocus}}}}
{func tempomap_debug
   {if {game is_up}
      {set $debug.beep {! $debug.beep}}
      {set $barf_cheat {! $barf_cheat}}
      {cheat_display show_bool "Tempomap debug" $debug.beep}}}
{func cycle_free_camera
   {if_else {track0 free_camera_active}
      {do
         {track0 free_camera FALSE}
         {cheat_display show "Free camera: off"}}
      {do
         {if_else {world free_cam_active}
            {do
               {track0 free_camera TRUE $cheat.controller}
               {cheat_display show "Free camera: Fretboard"}}
            {do
               {cheat_display show "Free camera: world"}}}
         {world toggle_free_cam $cheat.controller}}}}
{func toggle_crowd_meter
   {if {exists player0}
      {do
         ($new
            {! {player0 crowd_rating_active}})
         {player0 set_crowd_rating_active $new}
         {cheat_display show_bool "Crowd meter" $new}}}}
{set $mute_cheat FALSE}
{func toggle_mute_global
   {set $mute_cheat {! $mute_cheat}}
   {if_else $mute_cheat
      {do
         {synth set_master_vol kDbSilence}
         {cheat_display show "Mute all: TRUE"}}
      {do
         {synth set_master_vol 0}
         {cheat_display show "Mute all: FALSE"}}}}
{func toggle_crowd_audio
   {if {exists crowd_audio}
      {do
         ($new {! {crowd_audio enabled}})
         {crowd_audio set_enabled $new}
         {cheat_display show_bool "CrowdAudio" $new}}}}
{func toggle_walks
   {do
      ($g
         {find_obj world guitarist0})
      {if $g
         {cheat_display show_bool "Walks" {$g toggle_walks}}}}}
#define MULTI_AUTO_STATES
(((FALSE
         FALSE
         "off")
      (TRUE
         FALSE
         "player1")
      (FALSE
         TRUE
         "player2")
      (TRUE
         TRUE
         "all")))
{set $multi_auto_index 0}
{func cycle_multiplayer_auto_play
   {do
      ($new_index {mod {'+' $multi_auto_index 1} {size MULTI_AUTO_STATES}})
      ($state)
      ($pc0 {game get_player_config 0})
      ($pc1 {game get_player_config 1})
      {set $state {elem MULTI_AUTO_STATES $new_index}}
      {$pc0 set autoplay {elem $state 0}}
      {$pc1 set autoplay {elem $state 1}}
      {handle (player_matcher0 set_auto_play {elem $state 0})}
      {handle (player_matcher1 set_auto_play {elem $state 1})}
      {cheat_display show {sprint "Autoplay: " {elem $state 2}}}
      {set $multi_auto_index $new_index}}}
{func adjust_crowd_rating ($delta)
   {handle (player0 set_crowd_rating {'+' {player0 crowd_rating} $delta})}}
{func fake_player1_cheat
   ($player)
   {set_fake_player1 $player}
   {gamecfg set controller_checks FALSE}
   {cheat_display show {sprint "Faking Player " {'+' $player 1}}}}
{func toggle_fretboard
   {if {&& {exists meta} {! {meta is_up}}}
      {track_panel set_showing {! {track_panel showing}}}}}
#define MUSIC_SPEEDS
((1.0 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1))
{set $speed_index 0}
{func cycle_music_speed
   {if {! {meta is_up}}
      {do
         ($new_index {mod {'+' $speed_index 1} {size MUSIC_SPEEDS}})
         ($speed {elem MUSIC_SPEEDS $new_index})
         {beatmatch set_music_speed $speed}
         {cheat_display show {sprint "Track speed: " $speed}}
         {set $speed_index $new_index}}}}
{new Object scoring_debug
   ((active FALSE)
   (init
         {$this set [active] FALSE})
      (start
         {$this set [active] TRUE}
         {$this on_start}
         {$this poll})
      (is_active
         {$this get [active]})
      (stop
         {$this on_stop}
         {$this set [active] FALSE})
      (poll
         {$this on_poll}
         {if {$this get [active]}
            {game delay_task 15 (preserve $this) {$this poll}}}))
   (on_start {rnd show_overlay score_debug TRUE})
   (on_stop {rnd show_overlay score_debug FALSE})
   (on_poll
      {if_else {game is_up}
         {rnd reflect score_debug
            {printf
               "Crowd: %.2f-%.2f Notes: %d-%d-%d Mult: %.2f\n"
               {player0 raw_crowd_rating}
               {player0 crowd_rating}
               {player0 current_streak}
               {player0 longest_streak}
               {player0 notes_hit}
               {/ {player0 score} {beatmatch base_max_score 0}}}}
         {$this stop}})}
{func toggle_scoring_debug
   {if_else {scoring_debug is_active}
      {scoring_debug stop}
      {scoring_debug start}}}
{func toggle_lights_debug
   {do
      ($new_state {! {rnd overlay_showing lights}})
      {rnd show_overlay lights $new_state}}}
{func lights_debug ($msg)
   {rnd reflect lights
      {print "Lights: " $msg "\n"}}}
{func fill_star_meter
   {if {! {meta is_up}}
      {if_else {game multiplayer}
         {switch
            {fake_player1}
            (2
               {do
                  {player2 fill_star_power}
                  {cheat_display show "Filling Star Power for Player 2..."}})
            (1
               {do
                  {player1 fill_star_power}
                  {cheat_display show "Filling Star Power for Player 1..."}})
            (0
               {do
                  {player0 fill_star_power}
                  {cheat_display show "Filling Star Power for Player 0..."}})}
         {do
            {player0 fill_star_power}
            {cheat_display show "Filling Star Power..."}}}}}
{func empty_star_meter
   {if {! {meta is_up}}
      {if_else {game multiplayer}
         {switch {fake_player1}
            (2
               {do
                  {player2 empty_star_power}
                  {cheat_display show "Emptying Star Power for Player 2..."}})
            (1
               {do
                  {player1 empty_star_power}
                  {cheat_display show "Emptying Star Power for Player 1..."}})
            (0
               {do
                  {player0 empty_star_power}
                  {cheat_display show "Emptying Star Power for Player 0..."}})}
         {do
            {player0 empty_star_power}
            {cheat_display show "Emptying Star Power..."}}}}}
{func next_character_driver
   {if {find_obj world}
      {if {== $char_debug_driver 0}
         {if {! {char_debug {find_obj world guitarist0 main.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 1}
         {if {! {char_debug {find_obj world guitarist0 left_hand.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 2}
         {if {! {char_debug {find_obj world guitarist0 right_hand.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 3}
         {if {! {char_debug {find_obj world guitarist0 fret.ik}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 4}
         {if {! {char_debug {find_obj world guitarist0 wings.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 5}
         {if {! {char_debug {find_obj world guitarist1 main.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 6}
         {if {! {char_debug {find_obj world guitarist1 left_hand.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 7}
         {if {! {char_debug {find_obj world guitarist1 right_hand.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 8}
         {if {! {char_debug {find_obj world guitarist1 fret.ik}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 9}
         {if {! {char_debug {find_obj world guitarist1 wings.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 10}
         {if {! {char_debug {find_obj world singer main.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 11}
         {if {! {char_debug {find_obj world drummer main.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 12}
         {if {! {char_debug {find_obj world bassist main.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 13}
         {if {! {char_debug {find_obj world keyboardist main.drv}}}
            {'++' $char_debug_driver}}}
      {if {== $char_debug_driver 14}
         {char_debug}}
      {set $char_debug_driver {mod {'+' 1 $char_debug_driver} 15}}}}
{func show_lod_char ($char_name $show)
   {do
      ($char {find_obj world $char_name})
      {if $char
         {$char set (CharacterTesting show_screen_size) $show}}}}
{func toggle_char_lod
   {set $show_lod {! $show_lod}}
   {show_lod_char guitarist0 $show_lod}
   {show_lod_char guitarist1 $show_lod}
   {show_lod_char bassist $show_lod}
   {show_lod_char singer $show_lod}
   {show_lod_char keyboardist $show_lod}
   {show_lod_char drummer $show_lod}}
{func show_version
   {cheat_display show {sprint {elem {find $syscfg version} 1}}}}
{func toggle_normalization
   {do
      ($new {! {gamecfg get use_normalization}})
      ($s "using normalization")
      {gamecfg set use_normalization $new}
      {if {! $new}
         {set $s "not using normalization"}}
      {cheat_display show $s}}}
{func quick_progressive
   {if_else {== {rnd screen_width} 640}
      {do
         {rnd reset 512 448 16 0 0}
         {cheat_display show "Quick Progressive: OFF"}}
      {do
         {rnd reset 640 448 16 0 1}
         {cheat_display show "Quick Progressive: ON"}}}}
{func authored_cuts_toggle
   {set $camera_control_master {! $camera_control_master}}
   {if {!= {ui current_screen} video_settings_screen}
      {cheat_display show_bool "Authored camera cuts" $camera_control_master}}}
{func trivia_toggle
   {set $camera_control_master {! $trivia_display}}
   {cheat_display show_bool "Loading screen trivia" $trivia_display}}
{func author_toggle
   {set $camera_control_master {! $author_display}}
   {cheat_display show_bool "Chart authors listed" $author_display}}
{func debug_print_playlist
   {print "playlist songs: " $playlist "\n"}
   {print "playlist index: " $playlist_index "\n"}}
{func quick_intro
   {gamecfg set skip_intro {! $quick_intro}}
   {cheat_display show_bool "Skip intro" {gamecfg get skip_intro}}}
{func static_camera
   {set $static_camera {! $static_camera}}
   {world toggle_pick_shot}
   {cheat_display show_bool "Static camera" $static_camera}}
{func waypoint_toggle
   {set $waypoint_visible {! $waypoint_visible}}
   {waypoint_toggle_show}
   {cheat_display show_bool "Waypoint visibility" $waypoint_visible}}
{func waypoint_walk
   {handle ({find_obj world guitarist0} start_walk)}
   {cheat_display show "Walking to next waypoint (if supported by venue)"}}
{func waypoint_teleport
   {handle ({find_obj world guitarist0} teleport_next)}
   {cheat_display show "Teleporting to next waypoint (if supported by venue)"}}